// RepoEditor.tsx
import React, { useEffect, useState, useMemo } from "react";
import { SplitLayout, Button, TextField } from "@vaadin/react-components";
import Editor from "@monaco-editor/react";
import { GitEndpoint } from "Frontend/generated/endpoints";
import {debounce} from "@mui/material";

export type FileNode = {
    name: string;
    path: string;
    directory: boolean;
    children?: FileNode[];
};

export default function RepoEditor() {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤
    const [repoTree, setRepoTree] = useState<FileNode[]>([]);
    // –ü—É—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)
    const [selectedFile, setSelectedFile] = useState<string | null>(null);
    // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const [fileContent, setFileContent] = useState<string>("");
    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–º–∏—Ç–∞ (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç)
    const [commitMessage, setCommitMessage] = useState<string>("");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    useEffect(() => {
        GitEndpoint.getRepositoryTree()
            .then((data: FileNode[]) => {
                console.log("–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤:", data);
                setRepoTree(data);
            })
            .catch((err: any) =>
                console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤", err)
            );
    }, []);

    // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    useEffect(() => {
        if (selectedFile) {
            GitEndpoint.getFileContent("HEAD", selectedFile)
                .then((content: string) => {
                    setFileContent(content);
                })
                .catch((err: any) =>
                    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞", err)
                );
        }
    }, [selectedFile]);

    // –î–µ–±–∞—É–Ω—Å-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    const debouncedUpdateFile = useMemo(
        () =>
            debounce((newContent: string) => {
                if (selectedFile) {
                    GitEndpoint.updateFileContent(selectedFile, newContent).catch((err: any) =>
                        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞", err)
                    );
                }
            }, 500),
        [selectedFile]
    );

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    const handleEditorChange = (value: string | undefined) => {
        const newContent = value || "";
        setFileContent(newContent);
        debouncedUpdateFile(newContent);
    };

    // –ü—Ä–∏–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
    const FileTree: React.FC<{
        treeData: FileNode[];
        onFileSelect: (filePath: string) => void;
    }> = ({ treeData, onFileSelect }) => {
        return (
            <ul style={{ listStyleType: "none", paddingLeft: "1rem" }}>
                {treeData.map((node) => (
                    <FileTreeNode key={node.path} node={node} onFileSelect={onFileSelect} />
                ))}
            </ul>
        );
    };

    const FileTreeNode: React.FC<{
        node: FileNode;
        onFileSelect: (filePath: string) => void;
    }> = ({ node, onFileSelect }) => {
        const [expanded, setExpanded] = useState<boolean>(false);

        const handleClick = () => {
            if (node.directory) {
                setExpanded(!expanded);
            } else {
                onFileSelect(node.path);
            }
        };

        return (
            <li>
                <div
                    onClick={handleClick}
                    style={{ cursor: "pointer", userSelect: "none" }}
                >
                    {node.directory ? (expanded ? "üìÇ" : "üìÅ") : "üìÑ"} {node.name}
                </div>
                {node.directory && expanded && node.children && (
                    <ul style={{ listStyleType: "none", paddingLeft: "1rem" }}>
                        {node.children.map((child) => (
                            <FileTreeNode
                                key={child.path}
                                node={child}
                                onFileSelect={onFileSelect}
                            />
                        ))}
                    </ul>
                )}
            </li>
        );
    };

    return (
        <SplitLayout orientation="horizontal">
            {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Äì –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤ */}
            <div
                style={{
                    width: "30%",
                    borderRight: "1px solid #ccc",
                    padding: "1rem",
                    overflowY: "auto"
                }}
            >
                <h3>–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è</h3>
                <FileTree treeData={repoTree} onFileSelect={setSelectedFile} />
            </div>

            {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å ‚Äì —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞ */}
            <div style={{ width: "70%", padding: "1rem" }}>
                <h3>–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥–∞</h3>
                {selectedFile ? (
                    <>
                        <div>
                            <strong>–§–∞–π–ª:</strong> {selectedFile}
                        </div>
                        <Editor
                            height="70vh"
                            language={getLanguageFromFileName(selectedFile)}
                            value={fileContent}
                            onChange={handleEditorChange}
                        />
                        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞ –æ—Å—Ç–∞—ë—Ç—Å—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è */}
                        <div style={{ marginTop: "1rem" }}>
                            <TextField
                                label="–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"
                                value={commitMessage}
                                onChange={(e: any) => setCommitMessage(e.target.value)}
                            />
                            <Button
                                onClick={() => {
                                    if (!selectedFile) {
                                        alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∫–æ–º–º–∏—Ç–∞");
                                        return;
                                    }
                                    if (!commitMessage) {
                                        alert("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞");
                                        return;
                                    }
                                    GitEndpoint.commitFile(selectedFile, fileContent, commitMessage)
                                        .then((commitHash: string) => {
                                            alert(`–ö–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω: ${commitHash}`);
                                        })
                                        .catch((err: any) => {
                                            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ", err);
                                            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: " + err.message);
                                        });
                                }}
                            >
                                –°–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç
                            </Button>
                        </div>
                    </>
                ) : (
                    <div>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑ –¥–µ—Ä–µ–≤–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</div>
                )}
            </div>
        </SplitLayout>
    );
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞.
 */
function getLanguageFromFileName(fileName: string): string {
    const extension = fileName.split(".").pop()?.toLowerCase();
    switch (extension) {
        case "js":
        case "jsx":
            return "javascript";
        case "ts":
        case "tsx":
            return "typescript";
        case "java":
            return "java";
        case "py":
            return "python";
        case "html":
            return "html";
        case "css":
            return "css";
        case "json":
            return "json";
        default:
            return "plaintext";
    }
}
